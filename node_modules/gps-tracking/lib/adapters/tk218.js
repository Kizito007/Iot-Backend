/* */
var f = require('../functions');
var d = require('../device');
var crc = require('crc16-ccitt-node');
var cred = require("../serviceAcc/bot-acc.json");
const io = require('socket.io-client');
const feathers = require('@feathersjs/feathers');
const auth = require('@feathersjs/authentication-client');
const socketio = require('@feathersjs/socketio-client');

const socket = io('https://server.myfixbot.com');
const client = feathers();

client.configure(socketio(socket));
client.configure(auth({
    storageKey: 'auth'
}))
var api = client.service('dbapi');






// var db = admin.database();
//var ref = db.ref("public/FIXBOT/users");
// var refe = db.ref("public/FIXBOT/Stale connections/");
// var reff = db.ref("public/FIXBOT/Registered devices/Data");
// var rfi = db.ref("public/FIXBOT/Registered devices/ids");


exports.protocol = 'GPSTK218';
exports.model_name = 'TK218';
exports.compatible_hardware = ['TK218/supplier'];




// Log in either using the given email/password or the token from storage






var adapter = function (device) {
    if (!(this instanceof adapter)) return new adapter(device);
    


    this.format = { 'start': '(', 'end': ')', 'separator': '' };
    this.device = device;
    // this.showe = function(){
    //     client.service('dbapi').get({}).then( u => {
    //         console.log(u);
    //     })
    // };

    // this.create_dev = function (id) {
    //     var deve;
    //     var refo = reff.child(id);
    //     var currentDate = new Date();
    //     var time = currentDate.toTimeString().slice(0, 8);
    //     var today = new Date().toLocaleDateString('en-GB', {
    //         day: 'numeric',
    //         month: 'short',
    //         year: 'numeric'
    //     });
        

    //     refo.once("value").then(function (snapshot) {
    //         deve = snapshot.val();
    //         if (deve == null) {
    //             rfi.once("value").then(function (snapshot) {
    //                 deve = snapshot.val().split(",");
    //                 if (deve.includes(id)) {
    //                     console.log("Create new device");
    //                     var ved = {
    //                         "Device Data": {
    //                             "id": id,
    //                             "name": "",
    //                             "email": "",
    //                             "location": "",
    //                             "phone_no": "",
    //                             "data": {

    //                             },
    //                             "errorcodes": {
    //                                 "dummy": "",
    //                             },
    //                             "last_comm": "",
    //                             "logs": {
    //                                 "dummy": "",



    //                             },
    //                             "created": {
    //                                 "day": today,
    //                                 "time": time,
    //                             }


    //                         },
    //                     }
    //                     refo.update(ved);
                    



    //                 }
    //                 else {
    //                     console.log("device doesn't exist in our database");
    //                     var go = {
    //                         info : "Nothing"
    //                     }
    //                     //refo.update(go);

    //                 }

    //                 // ...
    //             });
    //         }
    //         else {
    //             console.log('device exists in our database');
    //             //console.log(deve);
                
    //         }
    //     });
    //     //console.log(id);
        

    // };
    this.login = async credentials => {
        try {
          if(!credentials) {
            // Try to authenticate using an existing token
            await client.reAuthenticate();
          } else {
            //   api.get({}).then(u => {
            //     //   console.log(u);
            //   });
            // Otherwise log in with the `local` strategy using the credentials we got
            await client.authenticate({
              strategy: 'local',
              ...credentials
            });
            
          }
          user = await client.authenticate();
          
      
          
        } catch(error) {
            console.log(error);
        }
        
    };
    
    //  this.store_conn = function (id, raw, data, clas) {
       
    //    var currentDate = new Date();
    //    var time = currentDate.toTimeString().slice(0, 8);
    //    var today = currentDate.toLocaleDateString('en-GB', {
    //          day: 'numeric',
    //          month: 'short',
    //          year: 'numeric'
    //    });
    //    dat = {
    //      "time": time,
    //      "date": today,
    //      "data": raw,
    //      "raw data": data.toString()
    //    };
    //    userRef.update(dat);
    //  };

    // this.fetch_data = function(id, path){
    //     var data;
    //     var userRef = reff.child(id + "/Device data" + path);
    //     userRef.once("value").then(function (snapshot) {
    //         data = snapshot.val();
    //     });
    //     return data;
    // };
    this.good_conn = function (id, raw) {
        this.login(cred).then( ans => {
            
            var td = new Date();
            var today = td.toLocaleDateString('en-GB', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
            var time = td.toTimeString().slice(0, 8);
            raw["date"] = today;
            raw["time"] = time;
            var dt = {};
            dt[id] = raw;
            api.update('devices', dt);
        });
        
    };
    this.goode_conn = function (id, raw) {
        this.login(cred).then( ans => {
            var td = new Date();
            var today = td.toLocaleDateString('en-GB', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
            var time = td.toTimeString().slice(0, 8);
            raw["date"] = today;
            raw["time"] = time;
            var dt = {};
            dt[id] = {};
            dt[id]['logs'] = raw;
            api.update('devices', dt);
        });
    };
    /*******************************************
     PARSE THE INCOMING STRING FROM THE DECIVE
     You must return an object with a least: device_id, cmd and type.
     return device_id: The device_id
     return cmd: command from the device.
     return type: login_request, ping, etc.
     *******************************************/
    this.parse_data = function (data, devs) {
        var parts = {
            'device_id': data.toString('hex').substr(8, 14).replace(/f*$/, ''),//mandatory
            'cmd': data.toString('hex').substr(22, 4), //mandatory
            'data': data.toString('hex').slice(26, -8),
            'raw': data.toString()
        };
        
        this.device_id_complete = data.toString('hex').substr(8, 14);
        switch (parts.cmd) {
            case '5000':
                parts.action = 'login_request';
                break;
            case '9955':
                parts.action = 'ping';
                break;
            case '9999':
                parts.action = 'alarm';
                break;
            case '9901':
                parts.action = 'decode_canbus_data';
                break;
            case '9905':
                parts.action = 'read_vin';
                break;
	        case '9903':
		        parts.action = 'read_error_code';
		        break;
            case '9902':
                parts.action = 'decode_behaviour_data';
                break;
            case '4102':
                parts.action = 'set_gprs_time_interval';
                break;
            case '4103':
                parts.action = 'alarm_phone_number_authorization';
                break;
            case '4105':
                parts.action = 'set_overspeed_limitation';
                break;
            case '4106':
                parts.action = 'set_movement_alarm_radius';
                break;
            case '4110':
                parts.action = 're-initialization';
                break;
            case '4113':
                parts.action = 'set_sleep_mode';
                break;
            case '4114':
                parts.action = 'set_output_control';
                break;
            case '4116':
                parts.action = 'arming_status';
                break;
            case '4126':
                parts.action = 'set_gprs_time_interval_in_car_stop';
                break;
            case '4130':
                parts.action = 'activate_voice_monitor';
                break;
            case '4132':
                parts.action = 'set_time_zone';
                break;
            case '4145':
                parts.action = 'set_initial_odometer';
                break;
            case '4902':
                parts.action = 'reboot_device';
                break;
            case '5119':
                parts.action = 'set_heartbeat_time';
                break;
            case '9001':
                parts.action = 'get_firmware_version';
                break;
            case '9002':
                parts.action = 'read_gprs_time_interval';
                break;
            case '9003':
                parts.action = 'get_authorized_phone_numbers';
                break;
            case '5001':
                parts.action = 'heartbeat_packet';
                break;
            default:
                parts.action = 'other';
        }
        return parts;
        

    };

    this.run_other = function (cmd, msg_parts) {
        console.log(cmd);
        switch (cmd) {
            case 'BP00': //Handshake
                this.device.send(this.format_data(this.device.uid + 'AP01HSO'));
                break;
            default:
            // console.log(msg_parts);
        }
    };

    this.request_login_to_device = function () {
        //////good_conn(this.device.uid, msg_parts);
        //@TODO: Implement this.
    };

    this.receive_alarm = function (msg_parts) {
        //@TODO: implement this

        //Maybe we can save the gps data too.
        //gps_data = msg_parts.data.substr(1);
        alarm_code = msg_parts.data.substr(0, 2);
        alarm = { code: alarm_code, data: msg_parts.data.substr(2) };
        switch (alarm_code.toString()) {
            case '01':
                alarm = { 'code': 'sos', 'msg': 'Driver sends a S.O.S.' };
                break;
            case '50':
                alarm = { 'code': 'power_off', 'msg': 'Vehicle Power Off' };
                break;
            case '71':
                alarm = { 'code': 'accident', 'msg': 'The vehicle suffers an acciden' };
                break;
            case '05':
                alarm = { 'code': 'alarming', 'msg': 'The alarm of the vehicle is activated' };
                break;
            case '11':
                alarm = { 'code': 'overspeed', 'msg': 'Vehicle is over the max speed setted' };
                break;
            case '13':
                alarm = { 'code': 'gep_fence', 'msg': 'Out of geo fence' };
                break;
        }
        //this.send_comand("AS01",alarm_code.toString());
        var td = new Date();
        var today = td.toLocaleDateString('en-GB', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
        var day = today.getDay();
        var month = today.getMonth();
        var year = today.getYear();
        var dateString = year + "/" + month + "/" + day;
        var time = td.toTimeString().slice(0, 8);
        var dt =
        {
            "action": msgParts.action,
            "time": time,
            "date": dateString,
            "data": alarm,

        };
        _this.adapter.goode_conn(msgParts.device_id, dt);
        return alarm;
    };

    this.get_ping_data = function (msg_parts) {
        var data_parts = this.hex_to_ascii(msg_parts.data).split(',');
        console.log(data_parts);

        var data = {
            'time': data_parts[0],
            'gps_status': data_parts[1],
            'latitude_minutes': data_parts[2],
            'latitude_orientation': data_parts[3],
            'longitude_minutes': data_parts[4],
            'longitude_orientation': data_parts[5],
            'speed': data_parts[6],
            'orientation': data_parts[7],
            'date': data_parts[8],
            'magnetic_variation': data_parts[9],
            'direction': data_parts[10],
            'checksum': data_parts[11]
        };
        var datetime = '20' + data.date.substr(0, 2) + '/' + data.date.substr(2, 2) + '/' + data.date.substr(4, 2);
        datetime += ' ' + data.time.substr(0, 2) + ':' + data.time.substr(2, 2) + ':' + data.time.substr(4, 2);
        data.datetime = new Date(datetime);
        data.latitude = f.minute_to_decimal(data.latitude_minutes, data.latitude_orientation);
        data.longitude = f.minute_to_decimal(data.longitude_minutes, data.longitude_orientation);
	//console.log(data);
	return data;
	
    };
    this.decode_canbus_data = function (msg_parts) {
        var data_parts = this.hex_to_ascii(msg_parts.data).split(',');
        var data = {
            'battery_voltage': data_parts[0],
            'engine_speed': data_parts[1],
            'running_speed': data_parts[2],
            'throttle_opening_width': data_parts[3],
            'engine_load': data_parts[4],
            'coolant_temp': data_parts[5],
            'instantenous_fuel_consumption': data_parts[6],
            'average_fuel_consumption': data_parts[7],
            'driving_range': data_parts[8],
            'total_mileage': data_parts[9],
            'single_fuel_consumption_vol': data_parts[10],
            'total_fuel_consumption_vol': data_parts[11],
            'current_error_code_nos': data_parts[12],
            'harsh_acceleration_no': data_parts[13],
            'harsh_brake_no': data_parts[14]
        };
        data.battery_voltage += " V";
        data.engine_speed += " RPM";
        data.running_speed += " Km/h";
        data.throttle_opening_width += " TPS %";
        data.engine_load += " %";
        data.coolant_temp += " ℃";
        data.instantenous_fuel_consumption += " L/100Km";
        data.average_fuel_consumption += " L/100Km";
        data.driving_range += " Km";
        data.total_mileage += " Km";
        data.single_fuel_consumption_vol += " L";
        data.total_fuel_consumption_vol += " L";
        data.harsh_acceleration_no += " times";
        data.harsh_brake_no += " times";
        //Get Error codes if any
        var mssg = "nothing";
         if(data.current_error_code_nos > 0){
            mssg = "error";
         }
        //push into firebase
       // var usersRef = reff.child(msgParts.device_id);
        var currentDate = new Date();
        var time = currentDate.toTimeString().slice(0, 8);
        var today = new Date().toLocaleDateString('en-GB', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
//        var day = today.getDay();
  //      var month = today.getMonth();
    //    var year = today.getYear();
        data["time"] = time;
        var dateString = "Device data/Data" + "/" + "canbus";
        



        
        return mssg, data;
    };
    this.decode_vin = function(msg_parts){
        var vin = this.hex_to_ascii(msg_parts.data);
        return vin;
    };
    this.decode_behaviour_data = function (msg_parts) {
        var data_parts = this.hex_to_ascii(msg_parts.data).split(',');
        var data = {
            'total_ignition_no': data_parts[0],
            'total_driving_time': data_parts[1],
            'total_idling_time': data_parts[2],
            'average_hot_start_time': data_parts[3],
            'average_speed': data_parts[4],
            'history_highest_speed': data_parts[5],
            'history_highest_rotation': data_parts[6],
            'total_harsh_acceleration_no': data_parts[7],
            'total_harsh_brake_no': data_parts[8]
        };
        data.total_ignition_no += " times";
        data.total_driving_time += " h";
        data.total_idling_time += " h";
        data.average_hot_start_time += " s";
        data.average_speed += " Km/h";
        data.history_highest_speed += " Km/h";
        data.history_highest_rotation += " RPM";
        data.total_harsh_acceleration_no += " times";
        data.total_harsh_brake_no += " times";
       // var usersRef = reff.child(this.device.uid);
        var currentDate = new Date();
        var time = currentDate.toTimeString().slice(0, 8);
        var today =  currentDate.toLocaleDateString('en-GB', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
        data['time'] = time;
        //var day = today.getDay();
        //var month = today.getMonth();
        //var year = today.getYear();
        //var dateString = "Device data/Data" + "/" + "driver_b";
        //usersRef.child(dateString).push(data);
        return data;
    };


    /* SET REFRESH TIME */
    this.set_refresh_time = function (interval, duration) {
        //XXXXYYZZ
        //XXXX Hex interval for each message in seconds
        //YYZZ Total time for feedback
        //YY Hex hours
        //ZZ Hex minutes
        var hours = parseInt(duration / 3600);
        var minutes = parseInt((duration - hours * 3600) / 60);
        var time = f.str_pad(interval.toString(16), 4, '0') + f.str_pad(hours.toString(16), 2, '0') + f.str_pad(minutes.toString(16), 2, '0');
        this.send_comand('AR00', time);
    };

    /* INTERNAL FUNCTIONS */

    this.checksum = function (msg) {
        return crc.getCrc16(new Buffer(msg, 'hex')).toString(16);
    };

    this.send_comand = function (cmd, data, id) {
        if (typeof data === 'undefined') data = '';
        
        var l = data.length / 2 + 17;
        var msg = '4040' + this.pad_hex(l.toString(16), 4) + id + cmd.substr(0, 4) + data;
        var checksum = this.checksum(msg);
        //console.log(checksum);
        msg += checksum + '0d0a';

        var msge = new Buffer(msg, 'hex');
        return msge
      
    };

    this.pad_hex = function (string, length) {
        var str = '' + string;
        while (str.length < length) str = '0' + str;
        return str;
    };

    this.hex_to_ascii = function (str1) {
        var hex = str1.toString();
        var str = '';
        for (var n = 0; n < hex.length; n += 2) {
            str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));
        }
        return str;
    };

};
exports.adapter = adapter;
