util = require('util');
EventEmitter = require('events').EventEmitter;
util.inherits(Device, EventEmitter);
const http = require('http');
const cred = require("./serviceAcc/bot-acc.json");


// const optionz = {
//   hostname: 'api.carmd.com/v3.0',
//   port: 80,
//   path: '',
//   method: 'GET',
//   headers: {
//     'Content-Type': 'application/json',
//     'Authorization': 'Basic ZGNmMDA3NWMtYzhhOC00MWE0LWE0ODUtYzg0ZmQ5NmJlMjU0',
//     'Partner-Token': '5e5677fa5af84266b75af88941e513cc'

//   }
// };
// function make_call(optionz){
//     var data;
//     const req = http.request(optionz, res => {
//         console.log(`statusCode: ${res.statusCode}`)
      
//         res.on('data', d => {
//             data = process.stdout.write(d);
//             return data;
//         })
//     })
      
//     req.on('error', error => {
//         console.error(error)
//     })
      
//     req.end()
    

// };

// function carmd(path, vin, mileage, dtc){
//     var outp = {};
//     if(path == "fields"){
//         url = '/fields?vin=' + str(vin);
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get fields from CarMd API")
//         }
//     }
//     else if(path == "decode"){
//         url = '/decode?vin=' + str(vin);
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get decode from CarMd API")
//         }

//     }
//     else if(path == "maint"){
//         url = '/maint?vin=' + vin.toString() + '&mileage=' + mileage.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get Maintenance data from CarMd API")
//         }

//     }
//     else if(path == "maintl"){
//         url = '/maint?vin=' + vin.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get maintenance list from CarMd API")
//         }

//     }
//     else if(path == "repair"){
//         url = '/repair?vin=' + vin.toString() + '&mileage=' + mileage.toString() + '&dtc=' + dtc.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get Repair Info from CarMd API")
//         }

//     }
//     else if(path == "Diagn"){
//         url = '/diag?vin=' + vin.toString() + '&mileage=' + mileage.toString() + '&dtc=' + dtc.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get Diagnostic from CarMd API")
//         }

//     }
//     else if(path == "UReps"){
//         url = '/upcoming?vin=' + vin.toString() + '&mileage=' + mileage.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get Upcoming repairs from CarMd API")
//         }

//     }
//     else if(path == "TSB"){
//         url = '/tsb?vin=' + vin.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get TSB from CarMd API")
//         }

//     }
//     else if(path == "SftyRecs"){
//         url = '/recall?vin=' + vin.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get Saftey recalls from CarMd API")
//         }

//     }
//     else if(path == "Vwrnty"){
//         url = '/warranty?vin=' + vin.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get fields from CarMd API")
//         }

//     }
//     else if(path == "Vimg"){
//         url = '/image?vin=' + vin.toString();
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get car image from CarMd API")
//         }

//     }
//     else if(path == "credits"){
//         url = '/credits';
//         opt = optionz;
//         opt.path = url;
//         outp = make_call(opt);
//         if(outp !== undefined){
//             return outp;
//         }
//         else{
//             console.log("Couldn't get credits from CarMd API")
//         }

//     }

// };

// function carmdInit(vin){
//     var paths = ['fields', 'decode', 'Vimg'];
//     var pack = {
//         'fields': {},
//         'decode': {},
//         'Vimg': {},
//         'date_time': getdatetime()
//     }
//     paths.forEach(pth => {
//         pack.pth = carmd(pth, vin, '', '');
//     });
    
//     return pack;

// };
// function carmdErr(vin, mileage, dtc){
//     var paths = ['diagn', 'repair'];
//     var pack = {
//         'dtc': dtc,
//         'diagn': {},
//         'repair': {},
//         'date_time': getdatetime()
//     }
//     paths.forEach(pth => {
//         pack.pth = carmd(pth, vin, mileage, dtc);
//     });
    
//     return pack;

// };


function getdatetime(){
    var td = new Date();
    var today = td.toLocaleDateString('en-GB', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
    var day = today.getDay();
    var month = today.getMonth();
    var year = today.getYear();
    var dateString = year + "/" + month + "/" + day;
    var time = td.toTimeString().slice(0, 8);
    var dt =
    {
        "time": time,
        "date": dateString,
    };
    return dt;
};

// function checkValid(o_dt){
//     var o_yr, o_mnth, o_day, n_yr, n_mnth, n_day;
//     var yrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
//     var n_dt = getdatetime();
//     o_yr = Parseint(o_dt.date.split('/')[0]);
//     o_mnth = o_dt.date.split('/')[1];
//     o_day = Parseint(o_dt.date.split('/')[2]);
//     n_yr = Parseint(n_dt.date.split('/')[0]);
//     n_mnth = n_dt.date.split('/')[1];
//     n_day = Parseint(n_dt.date.split('/')[2]);
    
//     if(o_yr == n_yr){
//         var i = [];
//         var ind;
//         [o_mnth, n_mnth].forEach(mnth => {
//             ind = yrs.indexOf(mnth);
//             if(ind !== -1){
//                 i.push(ind);
//             }
//             else{
//                 console.log("Month not Found")
//                 break;
//             }
//         });
//         if(i[0] == i[1]){
//             //The same month, No renewal
//             return false
//         }
//         else if(i[0] < i[1]){
//             //A new month, renewal valid
//             return true;
//         }
//     }
//     else if(o_yr < n_yr){
//         //A new Year, renewal valid
//         return true;

//     }


    
    
// };





function Device(adapter, connection, gpsServer) {
    /* Inherits EventEmitter class */
    EventEmitter.call(this);

    var _this = this;
    var devs = {};
    
    

    this.connection = connection;
    this.server = gpsServer;
    this.adapter = adapter.adapter(this);

    this.uid = false;
    this.ip = connection.ip;
    this.port = connection.port;
    this.name = false;
    this.loged = false;
    var expect = function(tym, id){
	if( id !== false){
		if(tym == false){
			_this.adapter.good_conn(id, {"status" : "offline"});
			console.log(id + " is disconnected");
		}
		else{
			_this.adapter.good_conn(id, {"status" : "online"});
		}
        
	 }
	else{
		console.log("Unknown ID");
	}
    };
    var tm = false;
    init();
    /* init */
    
    function init() {
        _this.adapter.login(cred);
	//var iv = setInterval(expect(tm, this.uid), 1500);
    }

    

    /****************************************
     RECEIVING DATA FROM THE DEVICE
     ****************************************/
    this.on('data', function (data) {
        // _this.do_log("Incoming Data: " + data);
	tm = !tm;
        var msgParts = _this.adapter.parse_data(data);
        //devs = 
        //_this.adapter.create_dev(msgParts.device_id);
        //console.log(_this.adapter.create_dev(msgParts.device_id));

        // _this.adapter.store_conn("ANY", msgParts, msgParts.device_id, "All connections/");
        
        
        if (this.getUID() === false && typeof (msgParts.device_id) === 'undefined') {
            throw 'The adapter doesn\'t return the device_id and is not defined';
        }

        if (msgParts === false) { //something bad happened
            _this.do_log('The message (' + data + ') can\'t be parsed. Discarding...');
            return;
        }

        if (typeof (msgParts.cmd) === 'undefined') {
            throw 'The adapter doesn\'t return the command (cmd) parameter';
        }

        //If the UID of the devices it hasn't been setted, do it now.
        if (this.getUID() === false) {
            this.setUID(msgParts.device_id);
        }

        /************************************
         EXECUTE ACTION
         ************************************/
        // _this.adapter.good_conn(msgParts.device_id, { "process": msgParts.action });
        var info = msgParts.raw;
        if (info.search("Host") !== -1) {
           var parts = {
               'device_id': "WEB BROWSER",//mandatory
               'cmd': "unknown", //mandatory
               'data': info,
               'action': "other"
           };
           console.log("Unregistered Device");
        //    console.log(cred);
           
            // _this.adapter.good_conn('59197080045546', { state : "onlin"});
        //    _this.adapter.store_conn("WEB BROWSER", parts, msgParts.raw, "Browsers/");
           _this.emit('send_msg', msgParts.device_id, _this.adapter.send_comand("4000", "01", msgParts.device_id));
           return false;
        }
        if (info.search("cookie") !== -1) {
           var parts = {
               'device_id': "cookie",//mandatory
               'cmd': "unknown", //mandatory
               'data': info,
               'action': "other"
           };
           console.log("Unregistered Device");
        //    _this.adapter.store_conn("Cookie", parts, msgParts.raw, "Cookies/");
           _this.emit('send_msg', msgParts.device_id, _this.adapter.send_comand("4000", "01", msgParts.device_id));
           return false;
        }
        else{
            _this.make_action(msgParts.action, msgParts);
        }
        
        
        
    });

    this.make_action = function (action, msgParts) {
        //If we're not loged
        if (action !== 'login_request' && !_this.loged) {
            
           
           
            
            _this.do_log(_this.getUID() + ' is trying to \'' + action + '\' but it isn\'t loged. Action wasn\'t executed');
            
            return false;
        }
        // _this.adapter.good_conn(msgParts.device_id, { "state": action });
        switch (action) {
            case 'login_request':
                _this.login_request(msgParts);
                break;
            case 'ping':
                _this.ping(msgParts);
		_this.emit('send msg', msgParts.device_id,_this.adapter.send_comand("9903", "", msgParts.device_id));
                break;
            case 'alarm':
                //_this.receive_alarm(msgParts);
                break;
            case 'decode_canbus_data':
		console.log("canbus");
                var input, canbus = _this.adapter.decode_canbus_data(msgParts);
                if (input == "error"){ _this.emit('send_msg', msgParts.device_id,_this.adapter.send_comand("9903", "", msgParts.device_id))};
		_this.adapter.good_conn(msgParts.device_id, { "canbus" : canbus });
		_this.adapter.goode_conn(msgParts.device_id, { "canbus" : canbus });

                break;
            case 'decode_behaviour_data':
		console.log("driver behaviour");
                _this.adapter.good_conn(msgParts.device_id, {"driver behavior" : _this.adapter.decode_behaviour_data(msgParts)});
                _this.adapter.goode_conn(msgParts.device_id, {"driver behavior" : _this.adapter.decode_behaviour_data(msgParts)});

                break;
	    case "read_error_code" :
		console.log("error code", msgParts.data);
		_this.decodeError(msgParts);
		break;
            case 'heartbeat_packet':
		_this.emit('send_msg', msgParts.device_id, _this.adapter.send_comand("4000", "01", msgParts.device_id));
                //_this.adapter.good_conn(msgParts.device_id, { "state":'online'});
                break;
            // case 'read_vin':
            //     var vin = _this.adapter.decode_vin(msgParts);
            //     _this.adapter.good_conn(msgParts.device_id, {"current_vin" : vin});
            //     if(_this.adapter.fetch_data(msgParts.device_id, 'vin_list') !== undefined){
            //         var old_vin = _this.adapter.fetch_data(msgParts.device_id, 'vin');
            //         if (vin == old_vin){
            //             //not the first time, in the same car.
            //             if(checkValid(_this.adapter.fetch_data(msgParts.device_id, 'CarMD/date_time'))){
            //                 _this.adapter.good_conn(msgParts.device_id, {"CarMD" :  carmdInit(vin)});
            //             }
            //         }
            //         else{
            //             //not the first time but in a different car.
            //             _this.adapter.good_conn(msgParts.device_id, {"vin_list" : _this.adapter.fetch_data(msgParts.device_id, 'vin_list') + ',' + vin});
            //             _this.adapter.good_conn(msgParts.device_id, {"CarMD" :  carmdInit(vin)});
            //         }
            //     }
            //     else{
            //         _this.adapter.good_conn(msgParts.device_id, {"vin_list" : vin });
            //         _this.adapter.good_conn(msgParts.device_id, {"CarMD" :  carmdInit(vin)});
            //         //first ever using the device
                    
            //     }
            //     _this.adapter.goode_conn(msgParts.device_id, {"current_vin" : vin});
            //     _this.adapter.goode_conn(msgParts.device_id, {"vin_list" : vin});
                
                
                
            //     break;
            case 'other':
                _this.adapter.run_other(msgParts.cmd, msgParts);
                break;
            default:
                _this.processdata(msgParts);

        }
        tm = !tm;
	expect(true, msgParts.device_id);
        
    };

    

    /****************************************
     LOGIN & LOGOUT
     ****************************************/
    this.login_request = function (msgParts) {
        _this.do_log('I\'m requesting to be loged.');
        if (true) {
            _this.emit('login_request', msgParts.device_id, msgParts);
        }
        else {
            this.do_log('Device ' + _this.getUID() + 'is not registered. Login request rejected');
        }
    };

    this.login_authorized = function (val, msgParts) {
        if (val) {
            this.do_log('Device ' + msgParts.device_id + ' has been authorized. Welcome!');
            this.loged = true;
            _this.emit('send_msg', msgParts.device_id, _this.adapter.send_comand("4000", "01", msgParts.device_id));
            _this.adapter.good_conn(msgParts.device_id, { "logged": "Yes" });
            _this.emit('send_msg', msgParts.device_id,_this.adapter.send_comand("9905", "", msgParts.device_id));
        } else {
            this.do_log('Device ' + _this.getUID() + ' not authorized. Login request rejected');
        }
    };
    this.processdata = function (msgParts) {
        if (msgParts.data.length == 0) {

        }
        else if (msgParts.data.length > 2) {
            var flag;
            var datum = "";
            if (msgParts.data.substr(0, 2) == "01") {
                flag = "Success";
                var td = new Date();
                var today = td.toLocaleDateString('en-GB', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric'
                });
                var day = today.getDay();
                var month = today.getMonth();
                var year = today.getYear();
                var dateString = year + "/" + month + "/" + day;
                var time = td.toTimeString().slice(0, 8);
                _this.adapter.good_conn(msgParts.device_id, { "last_comm": msgParts.action });
                dt =
                    {
                        "action": msgParts.action,
                        "time": time,
                        "date": dateString,
                        "flag": flag,
                        "seen": "No"

                    };
                _this.adapter.goode_conn(msgParts.device_id, dt);
            }
            else if (msgParts.data.substr(0, 2) == "00") {
                flag = "Failed";
                var td = new Date();
                var today = td.toLocaleDateString('en-GB', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric'
                });
                var day = today.getDay();
                var month = today.getMonth();
                var year = today.getYear();
                var dateString = year + "/" + month + "/" + day;
                var time = td.toTimeString().slice(0, 8);
                _this.adapter.good_conn(msgParts.device_id, { "last_comm": msgParts.action });
                dt =
                    {
                        "action": msgParts.action,
                        "time": time,
                        "date": dateString,
                        "flag": flag,
                        "seen": "No"

                    };
                _this.adapter.goode_conn(msgParts.device_id, dt);
            }
            else {
                if (msgParts.action == "get_authorized_phone_numbers") {
                    flag = "info";
                    datum = msgParts.data.toString('hex');

                    
                }
                else if (msgParts.action == "read_gprs_time_interval") {
                    flag = "info";
                    datum = parseInt(msgParts.data, 16) * 10;
                    datum = datum.toString();
                }
                var td = new Date();
                var today = td.toLocaleDateString('en-GB', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric'
                });
                var day = today.getDay();
                var month = today.getMonth();
                var year = today.getYear();
                var dateString = year + "/" + month + "/" + day;
                var time = td.toTimeString().slice(0, 8);
                _this.adapter.good_conn(msgParts.device_id, { "last_comm": msgParts.action });
                dt =
                    {
                        "action": msgParts.action,
                        "time": time,
                        "date": dateString,
                        "flag": flag,
                        "data": datum,

                    };
                _this.adapter.goode_conn(msgParts.device_id, dt);
            }
            

        }
    };

    this.logout = function () {
        this.loged = false;
        this.adapter.logout();
    	// console.log( " logged out");
    };

    /****************************************
     RECEIVING GPS POSITION FROM THE DEVICE
     ****************************************/
    this.decodeError = function (msgParts){
        // msgParts.data.split(',').forEach( err_code => {
        //     _this.adapter.good_conn(msgParts.device_id, { "error_code" : carmdErr(vin, _this.adapter.fetch_data(msgParts.device_id, 'canbus/mileage'), err_code)});
        // })
        _this.adapter.good_conn(msgParts.device_id, { "error_code" : msgParts.data});
	    _this.adapter.goode_conn(msgParts.device_id, { "error_code" : msgParts.data});

    }
    this.ping = function (msgParts) {
        _this.do_log('Position received');

        var gpsData = _this.adapter.get_ping_data(msgParts);

        if (gpsData === false) {
            //Something bad happened
            _this.do_log('GPS Data can\'t be parsed. Discarding packet...');
            return false;
        }

        /* Needs:
         latitude, longitude, time
         Optionals:
         orientation, speed, mileage, etc */
        var td = new Date();
        var today = td.toLocaleDateString('en-GB', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
	
        var time = td.toTimeString().slice(0, 8);

        _this.do_log('Position received ( ' + gpsData.latitude + ',' + gpsData.longitude + ' )');
        gpsData.from_cmd = msgParts.cmd;
        _this.adapter.good_conn(msgParts.device_id, { "location": gpsData });
        var gt =
        {
            "action": msgParts.action,
            "data": gpsData,
	     "date": today,
	      "time": time
        };
        _this.adapter.goode_conn(msgParts.device_id, { "location" : gt});
       
        //_this.emit('ping', gpsData, msgParts);

    };

    /****************************************
     RECEIVING ALARM
     ****************************************/
    this.receive_alarm = function (msgParts) {
        //We pass the message parts to the adapter and they have to say wich type of alarm it is.
        var alarmData = _this.adapter.receive_alarm(msgParts);
        _this.adapter.good_conn(msgParts.device_id, { "alarms": alarmData });
        _this.adapter.goode_conn(msgParts.device_id, { "alarms": alarmData });
        /* Alarm data must return an object with at least:
         alarm_type: object with this format:
         {'code':'sos_alarm','msg':'SOS Alarm activated by the driver'}
         */
        //_this.emit('alarm', alarmData.code, alarmData, msgParts);
    };

    /****************************************
     SET REFRESH TIME
     ****************************************/
    this.set_refresh_time = function (interval, duration) {
        _this.adapter.set_refresh_time(interval, duration);
    };

    /* adding methods to the adapter */
    this.adapter.get_device = function () {
        return device;
    };

    this.send = function (msg) {
        this.emit('send_data', msg);
        this.connection.write(msg);
        this.do_log('Sending to ' + _this.getUID() + ': ' + msg);
    };

    this.do_log = function (msg) {
        _this.server.do_log(msg, _this.getUID());
    };

    /****************************************
     SOME SETTERS & GETTERS
     ****************************************/
    this.getName = function () {
        return this.name;
    };

    this.setName = function (name) {
        this.name = name;
    };

    this.getUID = function () {
        return this.uid;
    };

    this.setUID = function (uid) {
        this.uid = uid;
    };

}

module.exports = Device;
